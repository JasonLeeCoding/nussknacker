// Comment settings example:
commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

db {
  url: "jdbc:hsqldb:hsql://localhost/db;sql.syntax_ora=true"
  driver: "org.hsqldb.jdbc.JDBCDriver"
  password: ""
  user: "SA"
  connectionTimeout: 30000
}

deploySettings: {
  requireComment: false
}

jdbcServer {
  dbFilePath: "dbFiles/db"
  dbName: "db"
  user: "sa"
  password: ""
}

customProcesses: {
  "customProcess1": "pl.touk.custom.NonExistingCustomProcess"
}

authentication: {
  method: "BasicAuth"
  usersFile: "./develConf/sample/users.conf"
}

environmentAlert: {
  content: "DEVELOPMENT ENVIRONMENT"
  cssClass: "indicator-green"
}

developmentMode: true

environment: "test"
attachmentsPath: "/tmp/attachments"

nginxProxyUrl: "http://localhost:8081"
nginxProxyUrl: ${?NGINX_PROXY_URL}

metricsSettings {
  url: ${nginxProxyUrl}"/grafana/dashboard/db/$dashboard?theme=dark&var-processName=$process&var-env=test"
  defaultDashboard: "nk-sample"
  processingTypeToDashboard: {
    "streaming": "nk-sample"
  }
}

countsSettings {
  user: "admin"
  password: "admin"
  influxUrl: ${nginxProxyUrl}"/grafana/api/datasources/proxy/1/query"
}

kibanaSettings {
  url: ${nginxProxyUrl}"/kibana/"
}

secondaryEnvironment {
  user: "admin"
  password: "admin"
  targetEnvironmentId: "localtest"
  remoteConfig: {
    uri: "http://localhost:8080/api",
    batchSize: 10
  }
}

standaloneEngineProcessLocation: "/tmp/standaloneProcesses"

categoriesConfig: {
  "Category1": "streaming",
  "Category2": "streaming",
  "StandaloneCategory1": "request-response"
}

#Two kind of configuration: flink streaming and standalone
processTypes {
  "streaming": {
    engineConfig {
      type: "flinkStreaming"
      jobManagerTimeout: 1m
      queryableStateProxyUrl: "localhost:3063"
      restUrl: "http://localhost:3031"
    }
    modelConfig = ${streamingModelConfig}
  }
  "request-response": {
    modelConfig {
      classPath: ["../../engine/standalone/engine/sample/target/scala-2.12/standaloneSample.jar"]
      environment: "test"
    }
    engineConfig {
      type: "requestResponseStandalone"
      managementUrl: "http://localhost:8070"
    }
  }
}

streamingModelConfig {
  classPath: ["../../engine/flink/management/sample/target/scala-2.12/managementSample.jar"]

  signals {
    topic: "nk-sample.dev.signals"
  }

  timeout: 10s
  restartInterval: 10s
  checkpointInterval: 10s

  kafka {
    kafkaAddress: "localhost:3032"
  }

  asyncExecutionConfig {
    bufferSize: 50
    parallelismMultiplier: 1
  }
}

akka {
  http {
    server.parsing.max-content-length = 300000000 #300MB
    server.parsing.max-uri-length = 200000
    port: 8080
  }
}
