jdbcServer {
  dbFilePath: "/opt/nussknacker/storage/db"
  dbName: "db"
  user: "nk"
  password: ""
}

db {
  url: "jdbc:hsqldb:hsql://localhost/db;sql.syntax_ora=true"
  driver: "org.hsqldb.jdbc.JDBCDriver"
  password: ""
  user: "SA"
  connectionTimeout: 30000
}

akka {
  http {
    server.parsing.max-content-length = 300000000 #300MB
  }
}

developmentMode: false
environment: "demo"

commentSettings: {
  matchExpression: "(issues/[0-9]*)"
  link: "https://github.com/TouK/nussknacker/$1"
}

categoriesConfig: {
  "FraudDetection": "streaming",
  "Recommendations": "streaming",
  "Default": "streaming"
}

# Authentication configuration
authentication: {
  method: ${AUTHENTICATION_METHOD}
  clientSecret: ${?OAUTH2_CLIENT_SECRET}
  clientId: ${?OAUTH2_CLIENT_ID}
  authorizeUri: ${?OAUTH2_AUTHORIZE_URI}
  redirectUri: ${?OAUTH2_REDIRECT_URI}
  accessTokenUri: ${?OAUTH2_ACCESS_TOKEN_URI}
  profileUri: ${?OAUTH2_PROFILE_URI}
  accessTokenParams: {
    grant_type: ${?OAUTH2_GRANT_TYPE}
  }
  authorizeParams {
    response_type: ${?OAUTH2_RESPONSE_TYPE}
    scope: ${?OAUTH2_SCOPE}
  }
  headers {
    Accept: ${?AUTHENTICATION_HEADERS_ACCEPT}
  }
  usersFile: ${AUTHENTICATION_USERS_FILE}
}

attachmentsPath: "/opt/nussknacker/storage/attachments"

# Model configuration
# ========================

flinkRestUrl: "http://jobmanager:8081"
flinkRestUrl: ${?FLINK_REST_URL}

flinkQueryableStateProxyUrl: "taskmanager:9069"
flinkQueryableStateProxyUrl: ${?FLINK_QUERYABLE_STATE_PROXY_URL}

processTypes {
  "streaming": {
    engineConfig {
      jobManagerTimeout: 1m
      type: "flinkStreaming"
      restUrl: ${flinkRestUrl}
      queryableStateProxyUrl: ${flinkQueryableStateProxyUrl}
    }
    modelConfig = ${streamingModelConfig}
  }
}

signalsTopic: "nk-demo.signals"
signalsTopic: ${?SIGNALS_TOPIC}

kafkaAddress: "kafka:9092"
kafkaAddress: ${?KAFKA_ADDRESS}

streamingModelConfig {
  classPath: ["model/demoModel.jar"]

  signals {
    topic: ${signalsTopic}
  }

  timeout: 10s
  restartInterval: 10s
  checkpointInterval: 10m

  kafka {
    kafkaAddress: ${kafkaAddress}
  }

  asyncExecutionConfig {
    bufferSize: 200
    parallelismMultiplier: 2
  }
}

customProcesses: {
  "customProcess1": "pl.touk.custom.NonExistingCustomProcess"
}

proxyUrl: "http://localhost:8081"
proxyUrl: ${?ROXY_URL}

metricsSettings {
  url: ${proxyUrl}"/grafana/dashboard/db/$dashboard?theme=dark&var-processName=$process&var-env=test"
  defaultDashboard: "nk-demo"
  processingTypeToDashboard: {
    "streaming": "nk-demo"
  }
}

countsSettings {
  user: "admin"
  password: "admin"
  influxUrl: ${proxyUrl}"/grafana/api/datasources/proxy/1/query"
}

kibanaSettings {
  url: ${proxyUrl}"/kibana/"
}
