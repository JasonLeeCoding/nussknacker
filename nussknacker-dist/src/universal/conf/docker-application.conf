db {
  url: "jdbc:hsqldb:file:/opt/nussknacker/storage/db/db;sql.syntax_ora=true"
  driver: "org.hsqldb.jdbc.JDBCDriver"
  user: "SA"
  password: ""
  connectionTimeout: 30000
}

categoriesConfig: {
  "FraudDetection": "streaming",
  "Recommendations": "streaming",
  "Default": "streaming"
}

authentication: {
  method: ${AUTHENTICATION_METHOD}
  clientSecret: ${?OAUTH2_CLIENT_SECRET}
  clientId: ${?OAUTH2_CLIENT_ID}
  authorizeUri: ${?OAUTH2_AUTHORIZE_URI}
  redirectUri: ${?OAUTH2_REDIRECT_URI}
  accessTokenUri: ${?OAUTH2_ACCESS_TOKEN_URI}
  profileUri: ${?OAUTH2_PROFILE_URI}
  accessTokenParams: {
    grant_type: ${?OAUTH2_GRANT_TYPE]
  }
  authorizeParams {
    response_type: ${?OAUTH2_RESPONSE_TYPE}
    scope: ${?OAUTH2_SCOPE}
  }
  headers {
    Accept: ${?AUTHENTICATION_HEADERS_ACCEPT}
  }
  usersFile: ${AUTHENTICATION_USERS_FILE}
}

environment: "demo"
attachmentsPath: "/tmp/touk/nussknacker-frontend/attachments"

akka {
  http {
    server.parsing.max-content-length = 300000000 #300MB
  }
}

customProcesses {}

flinkConfig {
  restUrl: "http://jobmanager:8081"
  queryableStateProxyUrl: "taskmanager:9069"
  parallelism: 4
  jobManagerTimeout: 1m
  classpath: ["model/exampleModel.jar"]
}

metricsSettings {
  url: "/grafana/dashboard/db/$dashboard?theme=dark&var-processName=$process&var-env=demo"
  defaultDashboard: "flink-esp"
  processingTypeToDashboard: {
    "request-response": "standalone",
    "streaming": "flink-esp"
  }
}

countsSettings {
  influxUrl: "http://grafana:3000/api/datasources/proxy/1/query"
  user: "admin"
  password: "admin"
}

kibanaSettings {
  url: "/kibana/"
}

#Add your model configuration here
processConfig {
  timeout: 10s
  checkpointInterval: 10m
  asyncExecutionConfig {
    bufferSize: 200
    parallelismMultiplier: 2
  }
  restartInterval: "10s"
  kafka = {
    zkAddress: "zookeeper:2181"
    kafkaAddress: "kafka:9092"
  }

  #TODO: add sample parameter configuration
  nodes {
    clientService {
      docsUrl: "https://en.wikipedia.org/wiki/Customer_service"
    }
  }
}
